import { APIEvaluation } from '../types/evaluation'

export function generateMarkdownReport(evaluation: APIEvaluation): string {
  const timestamp = new Date().toLocaleString('zh-TW')
  
  // Generate score badge
  const getScoreBadge = (score: number): string => {
    if (score >= 80) return '🟢 優秀'
    if (score >= 60) return '🟡 良好'
    return '🔴 需改進'
  }

  // Category translations
  const categoryNames: Record<string, string> = {
    resource_design: '資源設計',
    http_methods: 'HTTP 方法',
    status_codes: '狀態碼',
    naming_conventions: '命名規範',
    request_response: '請求/回應',
    versioning: '版本控制',
    documentation: '文件完整性',
  }

  const categoryIcons: Record<string, string> = {
    resource_design: '🏗️',
    http_methods: '🔧',
    status_codes: '📊',
    naming_conventions: '📝',
    request_response: '🔄',
    versioning: '📋',
    documentation: '📚',
  }

  let markdown = ''

  // Header
  markdown += '# API Judge 評估報告\n\n'
  markdown += `> 🕐 評估時間: ${timestamp}\n`
  markdown += `> ⚖️ Powered by Gemini AI\n\n`
  markdown += '---\n\n'

  // Overall Score Section
  markdown += '## 📊 總體評分\n\n'
  markdown += `### **${evaluation.overall_score}/100** ${getScoreBadge(evaluation.overall_score)}\n\n`
  
  // Progress bar visualization
  const progressBar = '█'.repeat(Math.floor(evaluation.overall_score / 10)) + 
                     '░'.repeat(10 - Math.floor(evaluation.overall_score / 10))
  markdown += `\`[${progressBar}]\` ${evaluation.overall_score}%\n\n`

  // Summary
  markdown += '## 📋 評估摘要\n\n'
  markdown += `${evaluation.summary}\n\n`

  // Critical Issues
  if (evaluation.critical_issues.length > 0) {
    markdown += '## 🚨 關鍵問題\n\n'
    markdown += '以下是需要立即處理的關鍵問題：\n\n'
    evaluation.critical_issues.forEach(issue => {
      markdown += `- ❌ ${issue}\n`
    })
    markdown += '\n'
  }

  // Best Practices
  if (evaluation.best_practices_followed.length > 0) {
    markdown += '## ✅ 遵循的最佳實踐\n\n'
    markdown += '您的 API 設計在以下方面表現良好：\n\n'
    evaluation.best_practices_followed.forEach(practice => {
      markdown += `- ✔️ ${practice}\n`
    })
    markdown += '\n'
  }

  // Category Details
  markdown += '## 📈 分類評分詳細\n\n'
  
  Object.entries(evaluation.categories).forEach(([key, category]) => {
    const icon = categoryIcons[key] || '📌'
    const name = categoryNames[key] || key
    const badge = getScoreBadge(category.score)
    
    markdown += `### ${icon} ${name}\n\n`
    markdown += `**評分: ${category.score}/100** ${badge}\n\n`
    
    // Progress bar for category
    const catProgressBar = '▓'.repeat(Math.floor(category.score / 10)) + 
                          '░'.repeat(10 - Math.floor(category.score / 10))
    markdown += `\`[${catProgressBar}]\`\n\n`
    
    // Issues
    if (category.issues.length > 0) {
      markdown += '**發現的問題:**\n\n'
      category.issues.forEach(issue => {
        markdown += `- ⚠️ ${issue}\n`
      })
      markdown += '\n'
    }
    
    // Suggestions
    if (category.suggestions.length > 0) {
      markdown += '**改進建議:**\n\n'
      category.suggestions.forEach(suggestion => {
        markdown += `- 💡 ${suggestion}\n`
      })
      markdown += '\n'
    }
    
    markdown += '---\n\n'
  })

  // Score Summary Table
  markdown += '## 📊 評分總覽表\n\n'
  markdown += '| 類別 | 評分 | 狀態 |\n'
  markdown += '|------|------|------|\n'
  
  Object.entries(evaluation.categories).forEach(([key, category]) => {
    const icon = categoryIcons[key] || '📌'
    const name = categoryNames[key] || key
    const badge = getScoreBadge(category.score)
    markdown += `| ${icon} ${name} | ${category.score}/100 | ${badge} |\n`
  })
  
  markdown += `| **總體評分** | **${evaluation.overall_score}/100** | **${getScoreBadge(evaluation.overall_score)}** |\n\n`

  // Footer
  markdown += '---\n\n'
  markdown += '*Generated by [API Judge](https://api-judge.vercel.app) - RESTful API Design Checker*\n'
  markdown += '*Powered by Google Gemini AI*\n'
  markdown += '*Advantech WiseIoT Internal Tool*\n'

  return markdown
}

export function downloadMarkdownReport(evaluation: APIEvaluation, filename?: string): void {
  const markdown = generateMarkdownReport(evaluation)
  const blob = new Blob([markdown], { type: 'text/markdown;charset=utf-8' })
  const url = URL.createObjectURL(blob)
  
  const timestamp = new Date().toISOString().split('T')[0]
  const defaultFilename = `api-judge-report-${timestamp}.md`
  
  const link = document.createElement('a')
  link.href = url
  link.download = filename || defaultFilename
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  
  URL.revokeObjectURL(url)
}